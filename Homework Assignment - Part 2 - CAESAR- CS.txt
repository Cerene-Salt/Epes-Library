Homework Assignment. Part 2 and 3. RUBIO

FIRST - CALCULATE INTEGER EXPONENTIATION OF BASE b TO THE POWER OF n.
SECOND - SIMPLE CALCULATOR THAT CAN ADD, SUBTRACT, DIVIDE AND MULTIPLY TWO NUMBERS ENTERED BY THE USER, ASKING FOR MATH OPERATORS.
THIRD - FIND MAXIMUM, MINIMUM AND AVERAGE FROM A LIST OF NUMBERS
FOURTH - FIBONACCI SERIES UPTO USER INPUT N
FIFTH- CHECK IF A NUMBER IS A PRIME


FIRST TASK- INTEGER EXPONENTATION

#INTEGER EXPONENTIATION
#IN this code, we are going to determine
#The exponentiation of a number acoording to the standart of of number to the power of another number
b = int(input("Enter a number here:"))
exp = int(input("Enter another number here:"))

int_exp = b**exp
print("The exponentiation for",b,"is",int_exp)

SECOND TASK - CALCULATOR

#In this program, weÂ´re creating a basic simple calculator
#Using the calculation methods by the simple aritmetic symbols:
# +, -, *, /, //, %. 
#Since we are working with the calculator,
#We will use all the real numbers, as integers, floats and negative numbers.
#And now we will define a function.
def calculator():
   
    
    operation1 = input("Enter a value here: ")
    operation2 = input("Enter another value here: ")
    operator = input("Insert an operator here: ")

   
        operation1 = float(operation1)
    else:
        operation1 = int(operation1)

    
    if "." in operation2:
        operation2 = float(operation2)
    else:
        operation2 = int(operation2)

    
    if operator == "+":
        total = operation1 + operation2
        print("The result is", total)
    elif operator == "-":
        total = operation1 - operation2
        print("The result is", total)
    elif operator == "*":
        total = operation1 * operation2
        print("The result is",total)
    elif operator == "/":
        total = operation1 / operation2
        print("The result is", total)
    elif operator == "%":
        # For the modulus operator, we can perform it on the numbers.
        total = operation1 % operation2
        print("The result is", total)
    else:.
        print("Try again, that's not a simple basic operator!")

# Call the function to run the calculator program.
calculator()

THIRD TASK - MAXMIMUM, MINIMUM , AVERAGE
#In this code we are finding the MMA for a list of number
# By first defining variables that correspond with what we want to do
#And find their MMA
def analyse_numbers(numbers):
    maximum = max(numbers)
    mininum = min(numbers)
    average = sum(numbers)/len(numbers)

    print("Maximum",maximum)
    print("Minimum",minimum)
    print("Average",average)

analyse_numbers([ 3,7,2,9,5])

FOURTH TASK - FIBONACCI SERIES

Fibonacci Series- Homework: 
#n this Task, i will redo the fbonacci series, presenting the result i a list
def fib_series():
    while True:  # Loop to ensure valid input
        try:
            # Ask user for input
            num_terms = int(input("Enter a positive integer here: "))
            
            # Validate the input
            if num_terms == 0:
                print("Try again, this is not a positive integer")
            elif num_terms == 1:
                print("No second-to-last term exists, try again")
            else:
                # Input is valid, break out of the loop
                break
        except ValueError:
            # Handle invalid input
            print("Invalid Input, please enter a positive integer")
    
    # Initialize Fibonacci list with the first two numbers
    fib_list = [0, 1]

    # Generate the Fibonacci sequence
    for a in range(2, num_terms):  # Start at index 2
        next_term = fib_list[a-1] + fib_list[a-2]  # Sum of last two terms
        fib_list.append(next_term)  # Add the next term to the list
    
    # Print the final Fibonacci series
    print("The Fibonacci series is", fib_list)

# Call the function to execute the code
fib_series()

FIFTH TASK - PRIME OR NON-PRIME NUMBERS

#CHECKING IF A NUMBER IS A PRIME
#THe method below manually checks if a few small prime numbers
# Uses simple conditions to determine if a number is likely a prime.

num= int(input("Enter a number:"))

if num > 1 and num % 2!=0 and num % 3!=0 and num  % 5  !=0 and num  %7 !=0:
    print(num, "is prime")
else:
    print(num,"is not a prime")
    print("||||||||||||||||||||||||||||||||||||||")






